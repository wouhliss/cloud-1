- name: Cloud-1 install dependencies
  hosts: myhosts
  become: true
  collections:
    - community.general.cloudflare_dns
    - ansible.posix.mount
  vars:
    swap_configure: true
    swap_file_path: /swap
    swap_file_size_mb: 1024
    swappiness: 1
  tasks:
    - name: Configure swap
      when: swap_configure | bool
      block:
        - name: Check if swap file exists
          stat:
            path: "{{swap_file_path}}"
            get_checksum: false
          register: swap_file_check
          changed_when: false

        - name: Check if swap is on
          shell: swapon --show | grep {{swap_file_path}}
          register: swap_is_enabled
          changed_when: false
          failed_when: false

        - name: Configure swap
          when: not swap_file_check.stat.exists|bool and not swap_is_enabled|bool
          block:
            - name: Create or change the size of swap file
              command: dd if=/dev/zero of={{swap_file_path}} count={{swap_file_size_mb}} bs=1MiB
              register: swap_file_created

            - name: Change swap file permissions
              file:
                path: "{{swap_file_path}}"
                mode: 0600

            - name: Check if swap is formatted
              shell: file {{swap_file_path}} | grep 'swap file'
              register: swap_file_is_formatted
              changed_when: false
              failed_when: false

            - name: Format swap file if it's not formatted
              command: mkswap {{swap_file_path}}
              when: >
                ('rc' in swap_file_is_formatted and swap_file_is_formatted.rc > 0)
                or swap_file_created.changed

            - name: Add swap entry to fstab
              mount:
                name: none
                src: "{{swap_file_path}}"
                fstype: swap
                opts: sw
                passno: "0"
                dump: "0"
                state: present

            - name: Turn on swap
              shell: swapon -a
              when: >
                ('rc' in swap_is_enabled and swap_is_enabled.rc != 0)
                or swap_disabled.changed

            - name: Configure swappiness
              sysctl:
                name: vm.swappiness
                value: "{{ swappiness|string }}"
                state: present

    # install packages to allow apt to use a repository over HTTPS:
    - name: Install docker packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: latest

    # apt-key fingerprint
    - name: Add Docker s official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    # apt-key fingerprint
    - name: Verify that we have the key with the fingerprint
      apt_key:
        id: 0EBFCD88
        state: present

    # add-apt-repository
    - name: Set up the stable repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes

    # apt-get update
    - name: Update apt packages
      apt:
        update_cache: yes

    # install docker-ce latetst verion
    - name: Install docker
      apt:
        name: docker-ce
        state: latest
        update_cache: yes

    # enable docker service to start at boot
    - name: Enable docker.service
      systemd:
        name: docker.service
        daemon_reload: true
        enabled: true

    # enable container service to start at boot
    - name: Enable containerd.service
      systemd:
        name: containerd.service
        daemon_reload: true
        enabled: true

    # sudo groupadd docker
    - name: Create "docker" group
      group:
        name: docker
        state: present

    # sudo usermod -aG docker root
    - name: Add remote user to "docker" group
      user:
        name: "{{ ansible_user }}"
        groups:
          - docker
        append: yes

    - name: Create a record using api token
      community.general.cloudflare_dns:
        zone: "{{ lookup('env','CLOUDFLARE_ZONE') }}"
        record: "{{ ansible_nodename }}"
        type: A
        value: "{{ inventory_hostname }}"
        proxied: false
        api_token: "{{ lookup('env','CLOUDFLARE_API_TOKEN') }}"

- name: Cloud-1 Deploy
  hosts: myhosts
  collections:
    - community.docker
  tasks:
    - name: Reset ssh connection to allow user changes to affect ansible user
      meta: reset_connection

    - name: copy Inception
      copy:
        src: files/inception
        dest: ~/app/

    - name: copy Dot Env
      copy:
        src: files/.env
        dest: ~/app/inception/.env

    - name: Add hostname variable to Dot Env
      lineinfile:
        path: ~/app/inception/.env
        regexp: "^HOSTNAME="
        line: "HOSTNAME={{ ansible_nodename }}"

    - name: deploy Inception
      community.docker.docker_compose_v2:
        project_src: ~/app/inception
        files:
          - docker-compose.yml
        state: present
        pull: always
        build: always
