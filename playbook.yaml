- name: Cloud-1 install dependencies
  hosts: myhosts
  become: true
  vars:
    dist: ubuntu
    release: focal
  tasks:
    # apt-get update
    - name: Update apt packages
      ansible.builtin.apt:
        update_cache: true

    # install packages to allow apt to use a repository over HTTPS:
    - name: Install required packages for HTTPS apt
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    # apt-key fingerprint
    - name: Add Docker official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/{{ dist }}/gpg
        state: present

    # apt-key fingerprint
    - name: Verify that we have the key with the fingerprint
      ansible.builtin.apt_key:
        id: 0EBFCD88
        state: present

    # add-apt-repository
    - name: Setup the stable repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/{{ dist }} {{ release }} stable
        state: present
        update_cache: true

    # apt-get update
    - name: Update apt packages
      ansible.builtin.apt:
        update_cache: true

    # install docker-ce latest verion
    - name: Install docker
      ansible.builtin.apt:
        name: docker-ce
        state: present
        update_cache: true

    # enable docker service to start at boot
    - name: Enable docker.service
      ansible.builtin.systemd:
        name: docker.service
        daemon_reload: true
        enabled: true

    # enable container service to start at boot
    - name: Enable containerd.service
      ansible.builtin.systemd:
        name: containerd.service
        daemon_reload: true
        enabled: true

    # sudo groupadd docker
    - name: Create "docker" group
      ansible.builtin.group:
        name: docker
        state: present

    # sudo usermod -aG docker "remote user"
    - name: Add remote user to "docker" group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups:
          - docker
        append: true

    # add a dns record pointing to remote instance
    - name: Create a record using api token
      community.general.cloudflare_dns:
        zone: "{{ lookup('env', 'CLOUDFLARE_ZONE') }}"
        record: "{{ ansible_nodename }}"
        type: A
        value: "{{ inventory_hostname }}"
        proxied: false
        api_token: "{{ lookup('env', 'CLOUDFLARE_API_TOKEN') }}"

- name: Cloud-1 Deploy
  hosts: myhosts
  tasks:
    # reset ssh connection for remote user to be able to use docker
    - name: Reset ssh connection to allow user changes to affect ansible user
      ansible.builtin.meta: reset_connection

    # copying project files to remote host
    - name: Copy Inception
      ansible.builtin.copy:
        src: files/inception
        dest: ~/app/
        mode: "700"

    # copying dot env to remote host
    - name: Copy Dot Env
      ansible.builtin.copy:
        src: files/.env
        dest: ~/app/inception/.env
        mode: "700"

    # adding hostname variable to dot env using ansible nodename variable
    - name: Add hostname variable to Dot Env
      ansible.builtin.lineinfile:
        path: ~/app/inception/.env
        regexp: "^HOSTNAME="
        line: "HOSTNAME={{ ansible_nodename }}"

    # starting the app
    - name: Deploy Inception
      community.docker.docker_compose_v2:
        project_src: ~/app/inception
        files:
          - docker-compose.yml
        state: present
        pull: always
        build: always
